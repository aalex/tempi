To do in Tempi
==============

Soon
-----
 * Create a timeline viewing actor.
 * create a node type registrator and factory. (NodeFactory::create(string type))
 * Create the tempi-plugins-base library
 * Enclose signals as private data member. Provide accessors to it, or allow to add callbacks to it.
 * Create Node::onSchedulerTick()
 * Create a Graph class, with a tick() method, which calls each node's onSchedulerTick(). Use boost::adjacency_list
 * Create a OscSourceNode

Later
-----
 * Many sender/receiver with the same host+port should share the same OSC sender. Use a map of tuple<ip,port> to shared_ptr<OscSender>.
 * Get done with tempi/samplernode.cpp
 * Get done with tempi/graph.cpp
 * Get done with tempi/noderegistry.h
 * Get done with tempi/tempi-signal.h
 * Create MIDI sink and sources nodes

Refactoring
-----------
 * Create tempi-base, containing sampling nodes, MIDI and OSC stuff.

 * tempi:
   - concurrent_queue.h
   - exceptions.h
   - filter.h
   - graph.h
   - identifier.h
   - message.h
   - node.h
   - node_factory.h
   - property.h
   - rule.h
   - shared_ptr.h
   - tempi.h
   - tempi_version.h
   - time_position.h
   - timer.h
   - types.h

 * tempi::base_plugins:
   - average.h
   - looping_playback.h
   - marker.h
   - pingpong_playback.h
   - playback.h
   - player.h
   - recorder.h
   - sampler_node.h
   - score.h
   - sink.h
   - slide.h
   - slide_filter.h
   - source.h
   - state.h
   - state_machine.h
   - table.h
   - table_player.h
   - table_writer.h
   - track.h

 * tempi::osc_plugins:
   - osc_receiver.h
   - osc_receiver_node.h
   - osc_sender.h
   - osc_sender_node.h

 * remove:
   - sourcenode.h
   - sinknode.h

