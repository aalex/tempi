#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright (C) 2011 Alexandre Quessy
# 
# This file is part of Tempi.
# 
# Tempi is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tempi is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tempi.  If not, see <http://www.gnu.org/licenses/>.
"""
Generates the tempi/types.h file.

Usage: $ python utils/gentypes.py > tempi/types.h
"""

import itertools

HEADER = """ /*
 * Copyright (C) 2011 Alexandre Quessy
 * 
 * This file is part of Tempi.
 * 
 * Tempi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Tempi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Tempi.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * Type definitions for common tuples in Tempi.
 * 
 * This file is generated by running the utils/gentypes.py script that is part of Tempi.
 * Do not edit it directly. Modify the script if needed.
 */

#ifndef __TEMPI_TYPES_H__
#define __TEMPI_TYPES_H__

#include <string>
#include <boost/any.hpp>
#include <boost/tuple/tuple.hpp>

namespace tempi
{

namespace types
{

using std::string;
using boost::any;
using boost::tuple;
"""

FOOTER = """

} // end of namespace

} // end of namespace

#endif // ifndef
"""

TYPES = {
    "a": "any",
    "b": "bool",
    # "c": "char",
    "d": "double",
    "f": "float", # or double?
    "i": "int",
    "s": "string",
    # "u": "unsigned int",
}

MAX_LENGTH = 5
TYPE_PREFIX = "_"
TYPE_SUFFIX = ""

def generate_permutations():
    ret = []
    for length in range(MAX_LENGTH):
        for x in itertools.product(TYPES.keys(), repeat=length + 1):
            ret.append(x)
    return ret

def get_one_typedef(keys):
    prefix = "typedef tuple<"
    name = ""
    char_pos = 0
    word_length = len(keys)

    for key in keys:
        prefix += TYPES[key]
        name += key
        # Append a comma if needed:
        char_pos += 1
        if char_pos < (word_length):
            prefix += ", "

    prefix += ">"
    return "{:<50}".format(prefix) + " " + TYPE_PREFIX + name + TYPE_SUFFIX + ";"

def print_all_permutations():
    permutations = generate_permutations()
    for permutation in permutations:
        print(get_one_typedef(permutation))

if __name__ == "__main__":
    print(HEADER)
    print_all_permutations()
    print(FOOTER)

